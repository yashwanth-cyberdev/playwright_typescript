# name: Playwright Tests

# on:
#   push:
#     branches: [main, master]
#   pull_request:
#     branches: [main, master]

# env:
#   NODE_VERSION: "20.10.0"

# jobs:
#   test:
#     timeout-minutes: 60
#     environment: production
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         shard: [1/2, 2/2]

#     permissions:
#       contents: write
#       pages: write
#       id-token: write

#     concurrency:
#       group: "pages"
#       cancel-in-progress: true

#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           ref: ${{ github.head_ref }}
#         if: github.event_name == 'pull_request'

#       - uses: actions/checkout@v4
#         if: github.event_name != 'pull_request'

#       - name: Fetch base branch for comparison
#         if: github.event_name == 'pull_request'
#         run: |
#           git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

#       - name: Use Node.js ${{ env.NODE_VERSION }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}

#       - run: npm ci

#       - name: Install jq
#         run: sudo apt-get install jq

#       - name: Install Playwright
#         run: npx playwright install --with-deps

#       - name: Run Changed files only
#         if: github.event_name == 'pull_request'
#         run: |
#           echo "Running tests for changes between ${{ github.base_ref }} and current branch"
#           npx playwright test --only-changed=${{ github.base_ref }}

#       - name: Run regression only
#         if: github.event_name == 'push'
#         env:
#           BASE_URL: ${{ secrets.BASE_URL }}
#           USER_NAME: ${{ secrets.USER_NAME }}
#         run: npx playwright test --project=tests --shard ${{ matrix.shard }}

#       - uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: playwright-report
#           path: playwright-report/
#           retention-days: 30

#       - name: Setup Pages
#         if: always()
#         uses: actions/configure-pages@v4

#       - name: Generate timestamp
#         id: timestamp
#         run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

#       # Upload and deploy to GitHub Pages (new way)
#       - name: Upload Pages artifact
#         if: always()
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: playwright-report/

#       - name: Deploy to GitHub Pages
#         if: always()
#         uses: actions/deploy-pages@v4
#         with:
#           artifact_name: github-pages
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # Cleanup old directories from gh-pages branch
#       - name: Checkout gh-pages branch
#         if: always()
#         uses: actions/checkout@v4
#         with:
#           ref: gh-pages
#           path: gh-pages-branch

#       # Deploy to gh-pages branch
#       - name: Deploy to gh-pages branch
#         if: always()
#         uses: peaceiris/actions-gh-pages@v3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           publish_dir: playwright-report
#           destination_dir: Playwright-report-${{ steps.timestamp.outputs.timestamp }}
#           keep_files: true

#       - name: Publish CTRF Test Summary Results
#         run: npx github-actions-ctrf summary ctrf/ctrf-report.json
#         if: always()

#       - name: Send Test Results to Slack
#         if: always()
#         run: |
#           npx slack-ctrf results ctrf/ctrf-report.json
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#       - name: Playwright Test Report URL
#         id: report_url
#         run: |
#           repo_name=${{ github.repository }} && repo_name=${repo_name#*/}
#           reportUrl="https://${{ github.repository_owner }}.github.io/$repo_name/"
#           echo "Playwright Test Report available at: $reportUrl"
#           echo "report_url=$reportUrl" >> "$GITHUB_OUTPUT"

#       - name: Notify Slack channel of Playwright
#         uses: rtCamp/action-slack-notify@v2.0.2
#         env:
#           SLACK_CHANNEL: playwright-project
#           SLACK_COLOR: "#3278BD"
#           SLACK_ICON: https://avatars0.githubusercontent.com/u/44036562?s=100&v=4
#           SLACK_MESSAGE: "Playwright Test Report available: ${{ steps.report_url.outputs.report_url }}"
#           SLACK_TITLE: Playwright Test Report
#           SLACK_USERNAME: Github Action Bot
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
